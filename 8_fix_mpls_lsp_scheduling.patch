diff --git a/zebra/connected.c b/zebra/connected.c
index 9737f8d..55c3792 100644
--- a/zebra/connected.c
+++ b/zebra/connected.c
@@ -39,6 +39,7 @@
 #include "zebra/connected.h"
 #include "zebra/rtadv.h"
 #include "zebra/zebra_mpls.h"
+#include "zebra/debug.h"
 
 /* communicate the withdrawal of a connected address */
 static void
@@ -218,10 +219,10 @@ connected_up_ipv4 (struct interface *ifp, struct connected *ifc)
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
@@ -347,10 +348,10 @@ connected_down_ipv4 (struct interface *ifp, struct connected *ifc)
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
@@ -382,10 +383,10 @@ connected_delete_ipv4 (struct interface *ifp, int flags, struct in_addr *addr,
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
@@ -421,10 +422,10 @@ connected_up_ipv6 (struct interface *ifp, struct connected *ifc)
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
@@ -520,10 +521,10 @@ connected_down_ipv6 (struct interface *ifp, struct connected *ifc)
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
@@ -554,10 +555,10 @@ connected_delete_ipv6 (struct interface *ifp, struct in6_addr *address,
   /* Schedule LSP forwarding entries for processing, if appropriate. */
   if (ifp->vrf_id == VRF_DEFAULT)
     {
-      if (IS_ZEBRA_DEBUG_RIB_DETAILED)
+      if (IS_ZEBRA_DEBUG_MPLS)
         zlog_debug ("%u: IF %s IPv4 address add/up, scheduling MPLS processing",
                 ifp->vrf_id, ifp->name);
-      zebra_mpls_lsp_schedule (vrf_info_lookup(ifp->vrf_id));
+      mpls_mark_lsps_for_processing (vrf_info_lookup(ifp->vrf_id));
     }
 }
 
diff --git a/zebra/zebra_mpls.c b/zebra/zebra_mpls.c
index 096f576..edfc080 100644
--- a/zebra/zebra_mpls.c
+++ b/zebra/zebra_mpls.c
@@ -1554,6 +1554,7 @@ zebra_mpls_init_tables (struct zebra_vrf *zvrf)
     return;
   zvrf->slsp_table = hash_create(label_hash, label_cmp);
   zvrf->lsp_table = hash_create(label_hash, label_cmp);
+  zvrf->mpls_flags = 0;
 }
 
 /*
diff --git a/zebra/zebra_mpls.h b/zebra/zebra_mpls.h
index 7d1f494..d258696 100644
--- a/zebra/zebra_mpls.h
+++ b/zebra/zebra_mpls.h
@@ -33,6 +33,7 @@
 #include "memory.h"
 #include "mpls.h"
 #include "zebra/zserv.h"
+#include "zebra/zebra_vrf.h"
 
 
 /* Definitions and macros. */
@@ -280,4 +281,31 @@ nhlfe_type2str(enum lsp_types_t lsp_type)
     }
 }
 
+static inline void
+mpls_mark_lsps_for_processing(struct zebra_vrf *zvrf)
+{
+  if (!zvrf)
+    return;
+
+  zvrf->mpls_flags |= MPLS_FLAG_SCHEDULE_LSPS;
+}
+
+static inline void
+mpls_unmark_lsps_for_processing(struct zebra_vrf *zvrf)
+{
+  if (!zvrf)
+    return;
+
+  zvrf->mpls_flags &= ~MPLS_FLAG_SCHEDULE_LSPS;
+}
+
+static inline int
+mpls_should_lsps_be_processed(struct zebra_vrf *zvrf)
+{
+  if (!zvrf)
+    return 0;
+
+  return ((zvrf->mpls_flags & MPLS_FLAG_SCHEDULE_LSPS) ? 1 : 0);
+}
+
 #endif /*_ZEBRA_MPLS_H */
diff --git a/zebra/zebra_rib.c b/zebra/zebra_rib.c
index 910610f..601721c 100644
--- a/zebra/zebra_rib.c
+++ b/zebra/zebra_rib.c
@@ -2033,6 +2033,16 @@ meta_queue_process_complete (struct work_queue *dummy)
           zebra_evaluate_rnh(zvrf->vrf_id, AF_INET6, 0, RNH_IMPORT_CHECK_TYPE, NULL);
         }
     }
+
+  /* Schedule LSPs for processing, if needed. */
+  zvrf = vrf_info_lookup(VRF_DEFAULT);
+  if (mpls_should_lsps_be_processed(zvrf))
+    {
+      if (IS_ZEBRA_DEBUG_MPLS)
+        zlog_debug ("%u: Scheduling all LSPs upon RIB completion", zvrf->vrf_id);
+      zebra_mpls_lsp_schedule (zvrf);
+      mpls_unmark_lsps_for_processing(zvrf);
+    }
 }
 
 /* Dispatch the meta queue by picking, processing and unlocking the next RN from
diff --git a/zebra/zebra_vrf.h b/zebra/zebra_vrf.h
index 1062c90..0baddc1 100644
--- a/zebra/zebra_vrf.h
+++ b/zebra/zebra_vrf.h
@@ -80,6 +80,10 @@ struct zebra_vrf
 
   /* MPLS label forwarding table */
   struct hash *lsp_table;
+
+  /* MPLS processing flags */
+  u_int16_t mpls_flags;
+#define MPLS_FLAG_SCHEDULE_LSPS    (1 << 0)
 };
 
 extern struct list *zvrf_list;
